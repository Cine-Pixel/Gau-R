bar <- foo:(-47+1.5)
bar
seq(from=3,to=27,by=3)
seq(from=3,to=27,length.out=40)
foo <- 5.3
myseq <- seq(from=foo,to=(-47+1.5),by=-2.4)
myseq
myseq2 <- seq(from=foo,to=(-47+1.5),length.out=5)
myseq2
rep(x=1,times=4)
rep(x=c(3,62,8.3),times=3)
rep(x=c(3,62,8.3),each=2)
rep(x=c(3,62,8.3),times=3,each=2)
foo <- 4
c(3,8.3,rep(x=32,times=foo),seq(from=-2,to=1,length.out=foo+1))
sort(x=c(2.5,-1,-10,3.44),decreasing=FALSE)
sort(x=c(2.5,-1,-10,3.44))
sort(x=c(2.5,-1,-10,3.44),decreasing=TRUE)
foo <- seq(from=4.3,to=5.5,length.out=8)
foo
bar <- sort(x=foo,decreasing=TRUE)
bar
sort(x=c(foo,bar),decreasing=FALSE)
length(x=c(3,2,8,1))
length(x=5:13)
foo <- 5.5:0.5
foo
foo-c(2,4,6,8,10,12)
bar <- c(1,-1)
foo*bar
baz <- c(1,-1,0.5,-0.5)
foo*baz
length(foo)
baz <- c(1,-1,0.5,-0.5, -1.5, -2)
foo*baz
qux <- 3
foo+qux
sum(foo)
prod(foo)
sum(foo)
foo
foo[c(1,3,5,6)]
foo[c(1,3,5,6)] <- c(-99,99)
foo
A <- matrix(data=c(-3,2,893,0.17),nrow=2,ncol=2)
A
foo
foo[c(1,3,5,6)] <- c(-99,99)
A <- matrix(data=c(-3,2,893,0.17),nrow=2,ncol=2)
A <- matrix(data=c(-3,2,893,0.17),nrow=2,ncol=2)
A
matrix(data=c(1,2,3,4,5,6),nrow=2,ncol=3,byrow=FALSE)
matrix(data=c(1,2,3,4,5,6),nrow=2,ncol=3,byrow=TRUE)
gc()
q()
clear()
cat(\014)
cat("\014")
A
foo <- 5.5:0.5
foo <- 5.5:0.5
foo
foo <- 5.5:0.5
foo
foo-c(2,4,6,8,10,12)
#
bar <- c(1,-1)
foo*bar
#
length(foo)
baz <- c(1,-1,0.5,-0.5, -1.5, -2)
foo*baz
#
qux <- 3
foo+qux
#
foo
#
sum(foo)
#
prod(foo)
#
foo
foo[c(1,3,5,6)] <- c(-99,99)
foo
A <- matrix(data=c(-3,2,893,0.17),nrow=2,ncol=2)
A
matrix(data=c(1,2,3,4,5,6),nrow=2,ncol=3,byrow=FALSE)
#
matrix(data=c(1,2,3,4,5,6),nrow=2,ncol=3,byrow=TRUE)
##
rbind(1:3,4:6)
#
cbind(c(1,4),c(2,5),c(3,6))
#
mymat <- rbind(c(1,3,4),5:3,c(100,20,90),11:13)
mymat
dim(mymat)
nrow(mymat)
ncol(mymat)
dim(mymat)[2]
###############
A <- matrix(c(0.3,4.5,55.3,91,0.1,105.5,-4.2,8.2,27.9),nrow=3,ncol=3)
A
A[3,2]
A[,2]
#
A[1,]
#
A[2:3,]
A[,c(3,1)]
A[c(3,1),2:3]
#
diag(x=A)
A[,-2]
#
A[-1,3:2]
#
A[-1,-2]
#
A[-1,-c(2,3)]
#
B <- A
B
#
B[2,] <- 1:3
B
#
B[c(1,3),2] <- 900
B
#
B[,3] <- B[3,]
B
#
B[c(1,3),c(1,3)] <- c(-7,7)
B
#
B[c(1,3),2:1] <- c(65,-65,88,-88)
B
#
diag(x=B) <- rep(x=0,times=3)
B
###############
A <- rbind(c(2,5,2),c(6,1,4))
A
t(A)
#
t(t(A))
A <- diag(x=3)
A
A <- rbind(c(2,5,2),c(6,1,4))
a <- 2
a*A
A <- cbind(c(2,5,2),c(6,1,4))
A
B <- cbind(c(-2,3,6),c(8.1,8.2,-9.8))
B
A-B
A <- rbind(c(2,5,2),c(6,1,4))
dim(A)
B <- cbind(c(3,-1,1),c(-3,1,5))
dim(B)
#
A%*%B
#
B%*%A
A <- matrix(data=c(3,4,1,2),nrow=2,ncol=2)
A
solve(A)
#
A%*%solve(A)
source("C:/projects/Rprogramming/l2.R")
rbind(1:3,4:6)
cbind(c(1,4),c(2,5),c(3,6))
mymat <- rbind(c(1,3,4),5:3,c(100,20,90),11:13)
mymat
dim(mymat)[2]
dim(mymat)[1]
A <- matrix(c(0.3,4.5,55.3,91,0.1,105.5,-4.2,8.2,27.9),nrow=3,ncol=3)
A
A[3,2]
A[,2]
A[1,]
A[2:3,]
A[c(3,1),2:3]
A
A[c(3,1),2:3]
A[,2]
A[1,]
A
A[3,2]
A[,2]
A[1,]
A[2:3,]
A[,c(3,1)]
A
A[,c(3,1)]
A
A[c(3,1),2:3]
#
A
#
A
A
diag(x=A)
A[,-2]
A[-1,3:2]
A[-1,-2]
A
A[-1,-c(2,3)]
A[-1,-c(2,3)]
A[-1,-2]
A[-1,-c(2,3)]
B <- A
B
B[2,] <- 1:3
B
B[c(1,3),2] <- 900
B
B[,3] <- B[3,]
B
s1 = seq(5, -11, by=3)
s1
s1 = seq(5, -11, by=-3)
s1
s1 = seq(5, -11, by=-0.3)
s1
s1_rev = rev(s1)
s1_rev
rep(c(-1,3,-5,7,-9), 10)
rep(c(-1,3,-5,7,-9), 2, 10)
rep(c(-1,3,-5,7,-9), times=2, each=10)
# Create and store a sequence of values from 5 to −11 that progresses in steps of 0.3.
s1 = seq(5, -11, by=-0.3)
s1
# b. Overwrite the object from (a) using the same sequence with the order reversed.
s1_rev = rev(s1)
s1_rev
# b. Overwrite the object from (a) using the same sequence with the order reversed.
s1 = rev(s1)
s1
# c. Repeat the vector c(-1,3,-5,7,-9) twice, with each element
# repeated 10 times, and store the result. Display the result sorted
# from largest to smallest.
c = rep(c(-1,3,-5,7,-9), times=2, each=10)
c
sort(x=c)
sort(x=c, decreasing = TRUE)
# d. Create and store a vector that contains, in any configuration, the following:
#  i. A sequence of integers from 6 to 12 (inclusive)
#  ii. A threefold repetition of the value 5.3
#  iii. The number −3
#  iv. A sequence of nine values starting at 102 and ending at the
#  number that is the total length of the vector created in (c)
seq(6, 10)
# d. Create and store a vector that contains, in any configuration, the following:
#  i. A sequence of integers from 6 to 12 (inclusive)
#  ii. A threefold repetition of the value 5.3
#  iii. The number −3
#  iv. A sequence of nine values starting at 102 and ending at the
#  number that is the total length of the vector created in (c)
c(seq(6, 10))
myseq2 <- seq(from=foo,to=(-47+1.5),length.out=5)
# d. Create and store a vector that contains, in any configuration, the following:
#  i. A sequence of integers from 6 to 12 (inclusive)
#  ii. A threefold repetition of the value 5.3
#  iii. The number −3
#  iv. A sequence of nine values starting at 102 and ending at the
#  number that is the total length of the vector created in (c)
d = c(seq(6, 10), rep(x=5.3, times=3), -3, seq(102, length(c), length.out=9))
d
# d. Create and store a vector that contains, in any configuration, the following:
#  i. A sequence of integers from 6 to 12 (inclusive)
#  ii. A threefold repetition of the value 5.3
#  iii. The number −3
#  iv. A sequence of nine values starting at 102 and ending at the
#  number that is the total length of the vector created in (c)
d = c(seq(6, 12), rep(x=5.3, times=3), -3, seq(102, length(c), length.out=9))
d
# e. Confirm that the length of the vector created in (d) is 20.
# Numerics,
length(d) == 20
# a .Create and store a vector that contains the following, in this order:
#  – A sequence of length 5 from 3 to 6 (inclusive)
#  – A twofold repetition of the vector c(2,-5.1,-33)
#  – The value 7
#  42 + 2
a = c(seq(3, 6, length.out=5), rep(c(2, -5.1, -33), times=2), 7, 42+2)
a
foo <- 5.3
bar <- foo:(-47+1.5)
bar
rbind(1:3,4:6)
cbind(c(1,4),c(2,5),c(3,6))
mymat <- rbind(c(1,3,4),5:3,c(100,20,90),11:13)
mymat
dim(mymat)
nrow(mymat)
ncol(mymat)
dim(mymat)[2]
A <- matrix(c(0.3,4.5,55.3,91,0.1,105.5,-4.2,8.2,27.9),nrow=3,ncol=3)
A
A[3,2]
# b. Extract the first and last elements of your vector from (a), storing
# them as a new object.
b = a[0]
b
a
# b. Extract the first and last elements of your vector from (a), storing
# them as a new object.
b = a[1]
b
# b. Extract the first and last elements of your vector from (a), storing
# them as a new object.
b = a[-1]
b
# b. Extract the first and last elements of your vector from (a), storing
# them as a new object.
b = a[-1]
b
# b. Extract the first and last elements of your vector from (a), storing
# them as a new object.
b = a[c(1, 2)]
b
# b. Extract the first and last elements of your vector from (a), storing
# them as a new object.
b = a[c(1, length(a))]
b
a
b = a[1]
b
# b. Extract the first and last elements of your vector from (a), storing
# them as a new object.
b = a[c(1, length(a))]
b
# c. Store as a third object the values returned by omitting the first
# and last values of your vector from (a).
c = a[2:length(a)]
c
a
# c. Store as a third object the values returned by omitting the first
# and last values of your vector from (a).
c = a[2:length(a)-1]
c
# c. Store as a third object the values returned by omitting the first
# and last values of your vector from (a).
c = a[2:length(a)-1]
c
# a .Create and store a vector that contains the following, in this order:
#  – A sequence of length 5 from 3 to 6 (inclusive)
#  – A twofold repetition of the vector c(2,-5.1,-33)
#  – The value 7
#  42 + 2
a = c(seq(3, 6, length.out=5), rep(c(2, -5.1, -33), times=2), 7, 42+2)
a
# c. Store as a third object the values returned by omitting the first
# and last values of your vector from (a).
c = a[2:length(a)-1]
c
# c. Store as a third object the values returned by omitting the first
# and last values of your vector from (a).
c = a[1:length(a)-1]
c
# c. Store as a third object the values returned by omitting the first
# and last values of your vector from (a).
c = a[2:length(a)-1]
c
# c. Store as a third object the values returned by omitting the first
# and last values of your vector from (a).
c = a[3:length(a)-1]
c
a[1:2]
a[1:3]
a[2:3]
# c. Store as a third object the values returned by omitting the first
# and last values of your vector from (a).
c = a[2:length(a)-1]
# c. Store as a third object the values returned by omitting the first
# and last values of your vector from (a).
c = a[2:(length(a)-1)]
c
a
# c. Store as a third object the values returned by omitting the first
# and last values of your vector from (a).
c = a[2:(length(a)-1)]
c
# d. Use only (b) and (c) to reconstruct (a).
a = c(b, c)
a
# e. Overwrite (a) with the same values sorted from smallest to largest.
a = sort(a)
a
# f. Use the colon operator as an index vector to reverse the order
# of (e), and confirm this is identical to using sort on (e) with
# decreasing=TRUE.
e[length(e):1] == sort(e, decreasing = TRUE)
e = a
# f. Use the colon operator as an index vector to reverse the order
# of (e), and confirm this is identical to using sort on (e) with
# decreasing=TRUE.
e[length(e):1] == sort(e, decreasing = TRUE)
# f. Use the colon operator as an index vector to reverse the order
# of (e), and confirm this is identical to using sort on (e) with
# decreasing=TRUE.
setequels(e[length(e):1], sort(e, decreasing = TRUE))
# f. Use the colon operator as an index vector to reverse the order
# of (e), and confirm this is identical to using sort on (e) with
# decreasing=TRUE.
setequel(e[length(e):1], sort(e, decreasing = TRUE))
# f. Use the colon operator as an index vector to reverse the order
# of (e), and confirm this is identical to using sort on (e) with
# decreasing=TRUE.
setequal(e[length(e):1], sort(e, decreasing = TRUE))
# g. Create a vector from (c) that repeats the third element of (c)
# three times, the sixth element four times, and the last element
# once.
c
g = c(rep(c[3], times=3), rep(c[6], times=4), c[length(c)])
g
# h. Create a new vector as a copy of (e) by assigning (e) as is to a
# newly named object. Using this new copy of (e), overwrite the
# first, the fifth to the seventh (inclusive), and the last element with
# the values 99 to 95 (inclusive), respectively.
h = e
h[c(1, 5:7, length(h))] = seq(from=99, to=95)
h = h[c(1, 5:7, length(h))] = seq(from=99, to=95)
h
# h. Create a new vector as a copy of (e) by assigning (e) as is to a
# newly named object. Using this new copy of (e), overwrite the
# first, the fifth to the seventh (inclusive), and the last element with
# the values 99 to 95 (inclusive), respectively.
h = e
h
h[c(1, 5:7, length(h))]
seq(form=99, to=95)
seq(from=99, to=95)
h[c(1, 5:7, length(h))]
# h. Create a new vector as a copy of (e) by assigning (e) as is to a
# newly named object. Using this new copy of (e), overwrite the
# first, the fifth to the seventh (inclusive), and the last element with
# the values 99 to 95 (inclusive), respectively.
copy = e
# h. Create a new vector as a copy of (e) by assigning (e) as is to a
# newly named object. Using this new copy of (e), overwrite the
# first, the fifth to the seventh (inclusive), and the last element with
# the values 99 to 95 (inclusive), respectively.
copy = e
copy[c(1, 5:7, length(copy))]
seq(from=99, to=95)
h
# h. Create a new vector as a copy of (e) by assigning (e) as is to a
# newly named object. Using this new copy of (e), overwrite the
# first, the fifth to the seventh (inclusive), and the last element with
# the values 99 to 95 (inclusive), respectively.
copy = e
copy
copy[c(1, 5:7, length(copy))]
seq(from=99, to=95)
h = copy[c(1, 5:7, length(copy))] = seq(from=99, to=95)
h
copy[c(1, 5:7, length(copy))] = seq(from=99, to=95)
copy
# h. Create a new vector as a copy of (e) by assigning (e) as is to a
# newly named object. Using this new copy of (e), overwrite the
# first, the fifth to the seventh (inclusive), and the last element with
# the values 99 to 95 (inclusive), respectively.
copy = e
copy
copy[c(1, 5:7, length(copy))] = seq(from=99, to=95)
copy
# h. Create a new vector as a copy of (e) by assigning (e) as is to a
# newly named object. Using this new copy of (e), overwrite the
# first, the fifth to the seventh (inclusive), and the last element with
# the values 99 to 95 (inclusive), respectively.
h = e
h[c(1, 5:7, length(h))] = seq(from=99, to=95)
h
e
# h. Create a new vector as a copy of (e) by assigning (e) as is to a
# newly named object. Using this new copy of (e), overwrite the
# first, the fifth to the seventh (inclusive), and the last element with
# the values 99 to 95 (inclusive), respectively.
h = e
h[c(1, 5:7, length(h))] = seq(from=99, to=95)
h
data = sort(data)
data = c(10, 19, 17, 40, 5, 12, 21, 2, 10, 37, 19, 6, 31, 23, 6, 7, 53, 15, 6, 27)
data = sort(data)
data
step = (data[1] + data[length(data)]) / 5
step
hist(data)
hist(data, main="Percentages of 9th graders who had used marijuana", xlab="Distribution in percent")
hist(data,
main="Percentages of 9th graders who had used marijuana",
xlab="Distribution in percent",
breaks = step
)
data = data.frame(
Austria = 10,
Belgium = 19
)
data
View(data)
data = c(10, 19, 17, 40, 5, 12, 21, 2, 10, 37, 19, 6, 31, 23, 6, 7, 53, 15, 6, 27)
data = sort(data)
data
hist(data,
main="Percentages of 9th graders who had used marijuana",
xlab="Distribution in percent",
breaks = step
)
